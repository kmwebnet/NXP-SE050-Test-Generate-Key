45,224d44
< #if defined(MBEDTLS_PLATFORM_C)
< #include "mbedtls/platform.h"
< #else
< #include <stdlib.h>
< #define mbedtls_calloc    calloc
< #define mbedtls_free       free
< #endif
< 
< #include "mbedtls/platform_util.h"
< 
< /* Parameter validation macros based on platform_util.h */
< #define ECDSA_VALIDATE_RET( cond )    \
<     MBEDTLS_INTERNAL_VALIDATE_RET( cond, MBEDTLS_ERR_ECP_BAD_INPUT_DATA )
< #define ECDSA_VALIDATE( cond )        \
<     MBEDTLS_INTERNAL_VALIDATE( cond )
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
< 
< /*
<  * Sub-context for ecdsa_verify()
<  */
< struct mbedtls_ecdsa_restart_ver
< {
<     mbedtls_mpi u1, u2;     /* intermediate values  */
<     enum {                  /* what to do next?     */
<         ecdsa_ver_init = 0, /* getting started      */
<         ecdsa_ver_muladd,   /* muladd step          */
<     } state;
< };
< 
< /*
<  * Init verify restart sub-context
<  */
< static void ecdsa_restart_ver_init( mbedtls_ecdsa_restart_ver_ctx *ctx )
< {
<     mbedtls_mpi_init( &ctx->u1 );
<     mbedtls_mpi_init( &ctx->u2 );
<     ctx->state = ecdsa_ver_init;
< }
< 
< /*
<  * Free the components of a verify restart sub-context
<  */
< static void ecdsa_restart_ver_free( mbedtls_ecdsa_restart_ver_ctx *ctx )
< {
<     if( ctx == NULL )
<         return;
< 
<     mbedtls_mpi_free( &ctx->u1 );
<     mbedtls_mpi_free( &ctx->u2 );
< 
<     ecdsa_restart_ver_init( ctx );
< }
< 
< /*
<  * Sub-context for ecdsa_sign()
<  */
< struct mbedtls_ecdsa_restart_sig
< {
<     int sign_tries;
<     int key_tries;
<     mbedtls_mpi k;          /* per-signature random */
<     mbedtls_mpi r;          /* r value              */
<     enum {                  /* what to do next?     */
<         ecdsa_sig_init = 0, /* getting started      */
<         ecdsa_sig_mul,      /* doing ecp_mul()      */
<         ecdsa_sig_modn,     /* mod N computations   */
<     } state;
< };
< 
< /*
<  * Init verify sign sub-context
<  */
< static void ecdsa_restart_sig_init( mbedtls_ecdsa_restart_sig_ctx *ctx )
< {
<     ctx->sign_tries = 0;
<     ctx->key_tries = 0;
<     mbedtls_mpi_init( &ctx->k );
<     mbedtls_mpi_init( &ctx->r );
<     ctx->state = ecdsa_sig_init;
< }
< 
< /*
<  * Free the components of a sign restart sub-context
<  */
< static void ecdsa_restart_sig_free( mbedtls_ecdsa_restart_sig_ctx *ctx )
< {
<     if( ctx == NULL )
<         return;
< 
<     mbedtls_mpi_free( &ctx->k );
<     mbedtls_mpi_free( &ctx->r );
< }
< 
< #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
< /*
<  * Sub-context for ecdsa_sign_det()
<  */
< struct mbedtls_ecdsa_restart_det
< {
<     mbedtls_hmac_drbg_context rng_ctx;  /* DRBG state   */
<     enum {                      /* what to do next?     */
<         ecdsa_det_init = 0,     /* getting started      */
<         ecdsa_det_sign,         /* make signature       */
<     } state;
< };
< 
< /*
<  * Init verify sign_det sub-context
<  */
< static void ecdsa_restart_det_init( mbedtls_ecdsa_restart_det_ctx *ctx )
< {
<     mbedtls_hmac_drbg_init( &ctx->rng_ctx );
<     ctx->state = ecdsa_det_init;
< }
< 
< /*
<  * Free the components of a sign_det restart sub-context
<  */
< static void ecdsa_restart_det_free( mbedtls_ecdsa_restart_det_ctx *ctx )
< {
<     if( ctx == NULL )
<         return;
< 
<     mbedtls_hmac_drbg_free( &ctx->rng_ctx );
< 
<     ecdsa_restart_det_init( ctx );
< }
< #endif /* MBEDTLS_ECDSA_DETERMINISTIC */
< 
< #define ECDSA_RS_ECP    &rs_ctx->ecp
< 
< /* Utility macro for checking and updating ops budget */
< #define ECDSA_BUDGET( ops )   \
<     MBEDTLS_MPI_CHK( mbedtls_ecp_check_budget( grp, &rs_ctx->ecp, ops ) );
< 
< /* Call this when entering a function that needs its own sub-context */
< #define ECDSA_RS_ENTER( SUB )   do {                                 \
<     /* reset ops count for this call if top-level */                 \
<     if( rs_ctx != NULL && rs_ctx->ecp.depth++ == 0 )                 \
<         rs_ctx->ecp.ops_done = 0;                                    \
<                                                                      \
<     /* set up our own sub-context if needed */                       \
<     if( mbedtls_ecp_restart_is_enabled() &&                          \
<         rs_ctx != NULL && rs_ctx->SUB == NULL )                      \
<     {                                                                \
<         rs_ctx->SUB = mbedtls_calloc( 1, sizeof( *rs_ctx->SUB ) );   \
<         if( rs_ctx->SUB == NULL )                                    \
<             return( MBEDTLS_ERR_ECP_ALLOC_FAILED );                  \
<                                                                      \
<         ecdsa_restart_## SUB ##_init( rs_ctx->SUB );                 \
<     }                                                                \
< } while( 0 )
< 
< /* Call this when leaving a function that needs its own sub-context */
< #define ECDSA_RS_LEAVE( SUB )   do {                                 \
<     /* clear our sub-context when not in progress (done or error) */ \
<     if( rs_ctx != NULL && rs_ctx->SUB != NULL &&                     \
<         ret != MBEDTLS_ERR_ECP_IN_PROGRESS )                         \
<     {                                                                \
<         ecdsa_restart_## SUB ##_free( rs_ctx->SUB );                 \
<         mbedtls_free( rs_ctx->SUB );                                 \
<         rs_ctx->SUB = NULL;                                          \
<     }                                                                \
<                                                                      \
<     if( rs_ctx != NULL )                                             \
<         rs_ctx->ecp.depth--;                                         \
< } while( 0 )
< 
< #else /* MBEDTLS_ECP_RESTARTABLE */
< 
< #define ECDSA_RS_ECP    NULL
< 
< #define ECDSA_BUDGET( ops )   /* no-op; for compatibility */
< 
< #define ECDSA_RS_ENTER( SUB )   (void) rs_ctx
< #define ECDSA_RS_LEAVE( SUB )   (void) rs_ctx
< 
< #endif /* MBEDTLS_ECP_RESTARTABLE */
< 
253,254c73
< static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
<                 mbedtls_mpi *r, mbedtls_mpi *s,
---
> int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
256,257c75
<                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
<                 mbedtls_ecdsa_restart_ctx *rs_ctx )
---
>                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
259,260c77
<     int ret, key_tries, sign_tries;
<     int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
---
>     int ret, key_tries, sign_tries, blind_tries;
263d79
<     mbedtls_mpi *pk = &k, *pr = r;
276,295c92
<     ECDSA_RS_ENTER( sig );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->sig != NULL )
<     {
<         /* redirect to our context */
<         p_sign_tries = &rs_ctx->sig->sign_tries;
<         p_key_tries = &rs_ctx->sig->key_tries;
<         pk = &rs_ctx->sig->k;
<         pr = &rs_ctx->sig->r;
< 
<         /* jump to current step */
<         if( rs_ctx->sig->state == ecdsa_sig_mul )
<             goto mul;
<         if( rs_ctx->sig->state == ecdsa_sig_modn )
<             goto modn;
<     }
< #endif /* MBEDTLS_ECP_RESTARTABLE */
< 
<     *p_sign_tries = 0;
---
>     sign_tries = 0;
298,303d94
<         if( *p_sign_tries++ > 10 )
<         {
<             ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
<             goto cleanup;
<         }
< 
308c99
<         *p_key_tries = 0;
---
>         key_tries = 0;
311c102,105
<             if( *p_key_tries++ > 10 )
---
>             MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
>             MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
> 
>             if( key_tries++ > 10 )
316,327d109
< 
<             MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<             if( rs_ctx != NULL && rs_ctx->sig != NULL )
<                 rs_ctx->sig->state = ecdsa_sig_mul;
< 
< mul:
< #endif
<             MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
<                                                   f_rng, p_rng, ECDSA_RS_ECP ) );
<             MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
329,341c111
<         while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<         if( rs_ctx != NULL && rs_ctx->sig != NULL )
<             rs_ctx->sig->state = ecdsa_sig_modn;
< 
< modn:
< #endif
<         /*
<          * Accounting for everything up to the end of the loop
<          * (step 6, but checking now avoids saving e and t)
<          */
<         ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );
---
>         while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
352c122,134
<         MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
---
>         blind_tries = 0;
>         do
>         {
>             size_t n_size = ( grp->nbits + 7 ) / 8;
>             MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
>             MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
> 
>             /* See mbedtls_ecp_gen_keypair() */
>             if( ++blind_tries > 30 )
>                 return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
>         }
>         while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
>                mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
357c139
<         MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
---
>         MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
360,361c142,143
<         MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
<         MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
---
>         MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
>         MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
363a146,151
> 
>         if( sign_tries++ > 10 )
>         {
>             ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
>             goto cleanup;
>         }
367,371d154
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->sig != NULL )
<         mbedtls_mpi_copy( r, pr );
< #endif
< 
376,377d158
<     ECDSA_RS_LEAVE( sig );
< 
380,398c161
< 
< /*
<  * Compute ECDSA signature of a hashed message
<  */
< int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
<                 const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
<                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
< {
<     ECDSA_VALIDATE_RET( grp   != NULL );
<     ECDSA_VALIDATE_RET( r     != NULL );
<     ECDSA_VALIDATE_RET( s     != NULL );
<     ECDSA_VALIDATE_RET( d     != NULL );
<     ECDSA_VALIDATE_RET( f_rng != NULL );
<     ECDSA_VALIDATE_RET( buf   != NULL || blen == 0 );
< 
<     return( ecdsa_sign_restartable( grp, r, s, d, buf, blen,
<                                     f_rng, p_rng, NULL ) );
< }
< #endif /* !MBEDTLS_ECDSA_SIGN_ALT */
---
> #endif /* MBEDTLS_ECDSA_SIGN_ALT */
404,405c167
< static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
<                     mbedtls_mpi *r, mbedtls_mpi *s,
---
> int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
407,408c169
<                     mbedtls_md_type_t md_alg,
<                     mbedtls_ecdsa_restart_ctx *rs_ctx )
---
>                     mbedtls_md_type_t md_alg )
412d172
<     mbedtls_hmac_drbg_context *p_rng = &rng_ctx;
424,437d183
<     ECDSA_RS_ENTER( det );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->det != NULL )
<     {
<         /* redirect to our context */
<         p_rng = &rs_ctx->det->rng_ctx;
< 
<         /* jump to current step */
<         if( rs_ctx->det->state == ecdsa_det_sign )
<             goto sign;
<     }
< #endif /* MBEDTLS_ECP_RESTARTABLE */
< 
442,446c188
<     mbedtls_hmac_drbg_seed_buf( p_rng, md_info, data, 2 * grp_len );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->det != NULL )
<         rs_ctx->det->state = ecdsa_det_sign;
---
>     mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
448,450d189
< sign:
< #endif
< #if defined(MBEDTLS_ECDSA_SIGN_ALT)
452,456c191
<                               mbedtls_hmac_drbg_random, p_rng );
< #else
<     ret = ecdsa_sign_restartable( grp, r, s, d, buf, blen,
<                       mbedtls_hmac_drbg_random, p_rng, rs_ctx );
< #endif /* MBEDTLS_ECDSA_SIGN_ALT */
---
>                       mbedtls_hmac_drbg_random, &rng_ctx );
462,463d196
<     ECDSA_RS_LEAVE( det );
< 
466,481d198
< 
< /*
<  * Deterministic signature wrapper
<  */
< int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
<                     const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
<                     mbedtls_md_type_t md_alg )
< {
<     ECDSA_VALIDATE_RET( grp   != NULL );
<     ECDSA_VALIDATE_RET( r     != NULL );
<     ECDSA_VALIDATE_RET( s     != NULL );
<     ECDSA_VALIDATE_RET( d     != NULL );
<     ECDSA_VALIDATE_RET( buf   != NULL || blen == 0 );
< 
<     return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
< }
489,493c206,208
< static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
<                                      const unsigned char *buf, size_t blen,
<                                      const mbedtls_ecp_point *Q,
<                                      const mbedtls_mpi *r, const mbedtls_mpi *s,
<                                      mbedtls_ecdsa_restart_ctx *rs_ctx )
---
> int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
>                   const unsigned char *buf, size_t blen,
>                   const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
498d212
<     mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
501,502c215
<     mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
<     mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
---
>     mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
508,522d220
<     ECDSA_RS_ENTER( ver );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->ver != NULL )
<     {
<         /* redirect to our context */
<         pu1 = &rs_ctx->ver->u1;
<         pu2 = &rs_ctx->ver->u2;
< 
<         /* jump to current step */
<         if( rs_ctx->ver->state == ecdsa_ver_muladd )
<             goto muladd;
<     }
< #endif /* MBEDTLS_ECP_RESTARTABLE */
< 
533a232,236
>      * Additional precaution: make sure Q is valid
>      */
>     MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
> 
>     /*
541,542d243
<     ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );
< 
545,549c246,247
<     MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
<     MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
< 
<     MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
<     MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
---
>     MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
>     MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
551,553c249,250
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx != NULL && rs_ctx->ver != NULL )
<         rs_ctx->ver->state = ecdsa_ver_muladd;
---
>     MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
>     MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
555,556d251
< muladd:
< #endif
558a254,256
>      *
>      * Since we're not using any secret data, no need to pass a RNG to
>      * mbedtls_ecp_mul() for countermesures.
560,561c258
<     MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
<                      &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );
---
>     MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
586,589c283
<     mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
<     mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
< 
<     ECDSA_RS_LEAVE( ver );
---
>     mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
593,611c287
< 
< /*
<  * Verify ECDSA signature of hashed message
<  */
< int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
<                           const unsigned char *buf, size_t blen,
<                           const mbedtls_ecp_point *Q,
<                           const mbedtls_mpi *r,
<                           const mbedtls_mpi *s)
< {
<     ECDSA_VALIDATE_RET( grp != NULL );
<     ECDSA_VALIDATE_RET( Q   != NULL );
<     ECDSA_VALIDATE_RET( r   != NULL );
<     ECDSA_VALIDATE_RET( s   != NULL );
<     ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );
< 
<     return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
< }
< #endif /* !MBEDTLS_ECDSA_VERIFY_ALT */
---
> #endif /* MBEDTLS_ECDSA_VERIFY_ALT */
640,641c316
< int mbedtls_ecdsa_write_signature_restartable( mbedtls_ecdsa_context *ctx,
<                            mbedtls_md_type_t md_alg,
---
> int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
645,646c320
<                            void *p_rng,
<                            mbedtls_ecdsa_restart_ctx *rs_ctx )
---
>                            void *p_rng )
650,653d323
<     ECDSA_VALIDATE_RET( ctx  != NULL );
<     ECDSA_VALIDATE_RET( hash != NULL );
<     ECDSA_VALIDATE_RET( sig  != NULL );
<     ECDSA_VALIDATE_RET( slen != NULL );
662,663c332,333
<     MBEDTLS_MPI_CHK( ecdsa_sign_det_restartable( &ctx->grp, &r, &s, &ctx->d,
<                              hash, hlen, md_alg, rs_ctx ) );
---
>     MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
>                              hash, hlen, md_alg ) );
667d336
< #if defined(MBEDTLS_ECDSA_SIGN_ALT)
670,674c339
< #else
<     MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
<                          hash, hlen, f_rng, p_rng, rs_ctx ) );
< #endif /* MBEDTLS_ECDSA_SIGN_ALT */
< #endif /* MBEDTLS_ECDSA_DETERMINISTIC */
---
> #endif
685,703c350
< /*
<  * Compute and write signature
<  */
< int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx,
<                                  mbedtls_md_type_t md_alg,
<                                  const unsigned char *hash, size_t hlen,
<                                  unsigned char *sig, size_t *slen,
<                                  int (*f_rng)(void *, unsigned char *, size_t),
<                                  void *p_rng )
< {
<     ECDSA_VALIDATE_RET( ctx  != NULL );
<     ECDSA_VALIDATE_RET( hash != NULL );
<     ECDSA_VALIDATE_RET( sig  != NULL );
<     ECDSA_VALIDATE_RET( slen != NULL );
<     return( mbedtls_ecdsa_write_signature_restartable(
<                 ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
< }
< 
< #if !defined(MBEDTLS_DEPRECATED_REMOVED) && \
---
> #if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \
710,713d356
<     ECDSA_VALIDATE_RET( ctx  != NULL );
<     ECDSA_VALIDATE_RET( hash != NULL );
<     ECDSA_VALIDATE_RET( sig  != NULL );
<     ECDSA_VALIDATE_RET( slen != NULL );
726,740d368
<     ECDSA_VALIDATE_RET( ctx  != NULL );
<     ECDSA_VALIDATE_RET( hash != NULL );
<     ECDSA_VALIDATE_RET( sig  != NULL );
<     return( mbedtls_ecdsa_read_signature_restartable(
<                 ctx, hash, hlen, sig, slen, NULL ) );
< }
< 
< /*
<  * Restartable read and check signature
<  */
< int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
<                           const unsigned char *hash, size_t hlen,
<                           const unsigned char *sig, size_t slen,
<                           mbedtls_ecdsa_restart_ctx *rs_ctx )
< {
746,748d373
<     ECDSA_VALIDATE_RET( ctx  != NULL );
<     ECDSA_VALIDATE_RET( hash != NULL );
<     ECDSA_VALIDATE_RET( sig  != NULL );
773c398
< #if defined(MBEDTLS_ECDSA_VERIFY_ALT)
---
> 
775c400
<                                       &ctx->Q, &r, &s ) ) != 0 )
---
>                               &ctx->Q, &r, &s ) ) != 0 )
777,781d401
< #else
<     if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
<                               &ctx->Q, &r, &s, rs_ctx ) ) != 0 )
<         goto cleanup;
< #endif /* MBEDTLS_ECDSA_VERIFY_ALT */
803,812c423,424
<     int ret = 0;
<     ECDSA_VALIDATE_RET( ctx   != NULL );
<     ECDSA_VALIDATE_RET( f_rng != NULL );
< 
<     ret = mbedtls_ecp_group_load( &ctx->grp, gid );
<     if( ret != 0 )
<         return( ret );
< 
<    return( mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d,
<                                     &ctx->Q, f_rng, p_rng ) );
---
>     return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||
>             mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );
814c426
< #endif /* !MBEDTLS_ECDSA_GENKEY_ALT */
---
> #endif /* MBEDTLS_ECDSA_GENKEY_ALT */
822,823d433
<     ECDSA_VALIDATE_RET( ctx != NULL );
<     ECDSA_VALIDATE_RET( key != NULL );
840,841d449
<     ECDSA_VALIDATE( ctx != NULL );
< 
850,852d457
<     if( ctx == NULL )
<         return;
< 
856,898d460
< #if defined(MBEDTLS_ECP_RESTARTABLE)
< /*
<  * Initialize a restart context
<  */
< void mbedtls_ecdsa_restart_init( mbedtls_ecdsa_restart_ctx *ctx )
< {
<     ECDSA_VALIDATE( ctx != NULL );
< 
<     mbedtls_ecp_restart_init( &ctx->ecp );
< 
<     ctx->ver = NULL;
<     ctx->sig = NULL;
< #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
<     ctx->det = NULL;
< #endif
< }
< 
< /*
<  * Free the components of a restart context
<  */
< void mbedtls_ecdsa_restart_free( mbedtls_ecdsa_restart_ctx *ctx )
< {
<     if( ctx == NULL )
<         return;
< 
<     mbedtls_ecp_restart_free( &ctx->ecp );
< 
<     ecdsa_restart_ver_free( ctx->ver );
<     mbedtls_free( ctx->ver );
<     ctx->ver = NULL;
< 
<     ecdsa_restart_sig_free( ctx->sig );
<     mbedtls_free( ctx->sig );
<     ctx->sig = NULL;
< 
< #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
<     ecdsa_restart_det_free( ctx->det );
<     mbedtls_free( ctx->det );
<     ctx->det = NULL;
< #endif
< }
< #endif /* MBEDTLS_ECP_RESTARTABLE */
< 
