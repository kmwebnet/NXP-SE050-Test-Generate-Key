36c36
< 
---
> #if !defined(MBEDTLS_ECDH_ALT)
38d37
< #include "mbedtls/platform_util.h"
42,61d40
< /* Parameter validation macros based on platform_util.h */
< #define ECDH_VALIDATE_RET( cond )    \
<     MBEDTLS_INTERNAL_VALIDATE_RET( cond, MBEDTLS_ERR_ECP_BAD_INPUT_DATA )
< #define ECDH_VALIDATE( cond )        \
<     MBEDTLS_INTERNAL_VALIDATE( cond )
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
< typedef mbedtls_ecdh_context mbedtls_ecdh_context_mbed;
< #endif
< 
< static mbedtls_ecp_group_id mbedtls_ecdh_grp_id(
<     const mbedtls_ecdh_context *ctx )
< {
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ctx->grp.id );
< #else
<     return( ctx->grp_id );
< #endif
< }
< 
64,92c43
<  * Generate public key (restartable version)
<  *
<  * Note: this internal function relies on its caller preserving the value of
<  * the output parameter 'd' across continuation calls. This would not be
<  * acceptable for a public function but is OK here as we control call sites.
<  */
< static int ecdh_gen_public_restartable( mbedtls_ecp_group *grp,
<                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
<                     int (*f_rng)(void *, unsigned char *, size_t),
<                     void *p_rng,
<                     mbedtls_ecp_restart_ctx *rs_ctx )
< {
<     int ret;
< 
<     /* If multiplication is in progress, we already generated a privkey */
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( rs_ctx == NULL || rs_ctx->rsm == NULL )
< #endif
<         MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
< 
<     MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
<                                                   f_rng, p_rng, rs_ctx ) );
< 
< cleanup:
<     return( ret );
< }
< 
< /*
<  * Generate public key
---
>  * Generate public key: simple wrapper around mbedtls_ecp_gen_keypair
98,102c49
<     ECDH_VALIDATE_RET( grp != NULL );
<     ECDH_VALIDATE_RET( d != NULL );
<     ECDH_VALIDATE_RET( Q != NULL );
<     ECDH_VALIDATE_RET( f_rng != NULL );
<     return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
---
>     return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
104c51
< #endif /* !MBEDTLS_ECDH_GEN_PUBLIC_ALT */
---
> #endif /* MBEDTLS_ECDH_GEN_PUBLIC_ALT */
110,111c57
< static int ecdh_compute_shared_restartable( mbedtls_ecp_group *grp,
<                          mbedtls_mpi *z,
---
> int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
114,115c60
<                          void *p_rng,
<                          mbedtls_ecp_restart_ctx *rs_ctx )
---
>                          void *p_rng )
122,123c67,72
<     MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
<                                                   f_rng, p_rng, rs_ctx ) );
---
>     /*
>      * Make sure Q is a valid pubkey before using it
>      */
>     MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
> 
>     MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
138,167c87
< 
< /*
<  * Compute shared secret (SEC1 3.3.1)
<  */
< int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
<                          const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
<                          int (*f_rng)(void *, unsigned char *, size_t),
<                          void *p_rng )
< {
<     ECDH_VALIDATE_RET( grp != NULL );
<     ECDH_VALIDATE_RET( Q != NULL );
<     ECDH_VALIDATE_RET( d != NULL );
<     ECDH_VALIDATE_RET( z != NULL );
<     return( ecdh_compute_shared_restartable( grp, z, Q, d,
<                                              f_rng, p_rng, NULL ) );
< }
< #endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */
< 
< static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
< {
<     mbedtls_ecp_group_init( &ctx->grp );
<     mbedtls_mpi_init( &ctx->d  );
<     mbedtls_ecp_point_init( &ctx->Q   );
<     mbedtls_ecp_point_init( &ctx->Qp  );
<     mbedtls_mpi_init( &ctx->z  );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     mbedtls_ecp_restart_init( &ctx->rs );
< #endif
< }
---
> #endif /* MBEDTLS_ECDH_COMPUTE_SHARED_ALT */
174,181d93
<     ECDH_VALIDATE( ctx != NULL );
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     ecdh_init_internal( ctx );
<     mbedtls_ecp_point_init( &ctx->Vi  );
<     mbedtls_ecp_point_init( &ctx->Vf  );
<     mbedtls_mpi_init( &ctx->_d );
< #else
183,203d94
< 
<     ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
< #endif
<     ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     ctx->restart_enabled = 0;
< #endif
< }
< 
< static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
<                                 mbedtls_ecp_group_id grp_id )
< {
<     int ret;
< 
<     ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
<     if( ret != 0 )
<     {
<         return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
<     }
< 
<     return( 0 );
207c98
<  * Setup context
---
>  * Free context
209c100
< int mbedtls_ecdh_setup( mbedtls_ecdh_context *ctx, mbedtls_ecp_group_id grp_id )
---
> void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
211,226c102,103
<     ECDH_VALIDATE_RET( ctx != NULL );
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_setup_internal( ctx, grp_id ) );
< #else
<     switch( grp_id )
<     {
<         default:
<             ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
<             ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
<             ctx->grp_id = grp_id;
<             ecdh_init_internal( &ctx->ctx.mbed_ecdh );
<             return( ecdh_setup_internal( &ctx->ctx.mbed_ecdh, grp_id ) );
<     }
< #endif
< }
---
>     if( ctx == NULL )
>         return;
228,229d104
< static void ecdh_free_internal( mbedtls_ecdh_context_mbed *ctx )
< {
231d105
<     mbedtls_mpi_free( &ctx->d  );
233a108,110
>     mbedtls_ecp_point_free( &ctx->Vi  );
>     mbedtls_ecp_point_free( &ctx->Vf  );
>     mbedtls_mpi_free( &ctx->d  );
235,249c112
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     mbedtls_ecp_restart_free( &ctx->rs );
< #endif
< }
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
< /*
<  * Enable restartable operations for context
<  */
< void mbedtls_ecdh_enable_restart( mbedtls_ecdh_context *ctx )
< {
<     ECDH_VALIDATE( ctx != NULL );
< 
<     ctx->restart_enabled = 1;
---
>     mbedtls_mpi_free( &ctx->_d );
251d113
< #endif
254c116,120
<  * Free context
---
>  * Setup and write the ServerKeyExhange parameters (RFC 4492)
>  *      struct {
>  *          ECParameters    curve_params;
>  *          ECPoint         public;
>  *      } ServerECDHParams;
256,289c122,125
< void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
< {
<     if( ctx == NULL )
<         return;
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     mbedtls_ecp_point_free( &ctx->Vi );
<     mbedtls_ecp_point_free( &ctx->Vf );
<     mbedtls_mpi_free( &ctx->_d );
<     ecdh_free_internal( ctx );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             ecdh_free_internal( &ctx->ctx.mbed_ecdh );
<             break;
<         default:
<             break;
<     }
< 
<     ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
<     ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
<     ctx->grp_id = MBEDTLS_ECP_DP_NONE;
< #endif
< }
< 
< static int ecdh_make_params_internal( mbedtls_ecdh_context_mbed *ctx,
<                                       size_t *olen, int point_format,
<                                       unsigned char *buf, size_t blen,
<                                       int (*f_rng)(void *,
<                                                    unsigned char *,
<                                                    size_t),
<                                       void *p_rng,
<                                       int restart_enabled )
---
> int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
>                       unsigned char *buf, size_t blen,
>                       int (*f_rng)(void *, unsigned char *, size_t),
>                       void *p_rng )
293,295d128
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     mbedtls_ecp_restart_ctx *rs_ctx = NULL;
< #endif
297c130
<     if( ctx->grp.pbits == 0 )
---
>     if( ctx == NULL || ctx->grp.pbits == 0 )
300,310c133,134
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( restart_enabled )
<         rs_ctx = &ctx->rs;
< #else
<     (void) restart_enabled;
< #endif
< 
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
<                                              f_rng, p_rng, rs_ctx ) ) != 0 )
---
>     if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
>                 != 0 )
312,316d135
< #else
<     if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
<                                          f_rng, p_rng ) ) != 0 )
<         return( ret );
< #endif /* MBEDTLS_ECP_RESTARTABLE */
318,319c137,138
<     if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf,
<                                              blen ) ) != 0 )
---
>     if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf, blen ) )
>                 != 0 )
325,326c144,145
<     if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format,
<                                              &pt_len, buf, blen ) ) != 0 )
---
>     if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
>                                      &pt_len, buf, blen ) ) != 0 )
334,382d152
<  * Setup and write the ServerKeyExhange parameters (RFC 4492)
<  *      struct {
<  *          ECParameters    curve_params;
<  *          ECPoint         public;
<  *      } ServerECDHParams;
<  */
< int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
<                               unsigned char *buf, size_t blen,
<                               int (*f_rng)(void *, unsigned char *, size_t),
<                               void *p_rng )
< {
<     int restart_enabled = 0;
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( olen != NULL );
<     ECDH_VALIDATE_RET( buf != NULL );
<     ECDH_VALIDATE_RET( f_rng != NULL );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     restart_enabled = ctx->restart_enabled;
< #else
<     (void) restart_enabled;
< #endif
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_make_params_internal( ctx, olen, ctx->point_format, buf, blen,
<                                        f_rng, p_rng, restart_enabled ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_make_params_internal( &ctx->ctx.mbed_ecdh, olen,
<                                                ctx->point_format, buf, blen,
<                                                f_rng, p_rng,
<                                                restart_enabled ) );
<         default:
<             return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
<     }
< #endif
< }
< 
< static int ecdh_read_params_internal( mbedtls_ecdh_context_mbed *ctx,
<                                       const unsigned char **buf,
<                                       const unsigned char *end )
< {
<     return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
<                                         end - *buf ) );
< }
< 
< /*
390,391c160
<                               const unsigned char **buf,
<                               const unsigned char *end )
---
>                       const unsigned char **buf, const unsigned char *end )
394,398d162
<     mbedtls_ecp_group_id grp_id;
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( buf != NULL );
<     ECDH_VALIDATE_RET( *buf != NULL );
<     ECDH_VALIDATE_RET( end != NULL );
400,401c164
<     if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
<             != 0 )
---
>     if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
404c167,168
<     if( ( ret = mbedtls_ecdh_setup( ctx, grp_id ) ) != 0 )
---
>     if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
>                 != 0 )
407,418c171
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_read_params_internal( ctx, buf, end ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_read_params_internal( &ctx->ctx.mbed_ecdh,
<                                                buf, end ) );
<         default:
<             return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
<     }
< #endif
---
>     return( 0 );
421,423c174,178
< static int ecdh_get_params_internal( mbedtls_ecdh_context_mbed *ctx,
<                                      const mbedtls_ecp_keypair *key,
<                                      mbedtls_ecdh_side side )
---
> /*
>  * Get parameters from a keypair
>  */
> int mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,
>                      mbedtls_ecdh_side side )
426a182,184
>     if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 )
>         return( ret );
> 
443c201
<  * Get parameters from a keypair
---
>  * Setup and export the client public value
445,492c203,206
< int mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx,
<                              const mbedtls_ecp_keypair *key,
<                              mbedtls_ecdh_side side )
< {
<     int ret;
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( key != NULL );
<     ECDH_VALIDATE_RET( side == MBEDTLS_ECDH_OURS ||
<                        side == MBEDTLS_ECDH_THEIRS );
< 
<     if( mbedtls_ecdh_grp_id( ctx ) == MBEDTLS_ECP_DP_NONE )
<     {
<         /* This is the first call to get_params(). Set up the context
<          * for use with the group. */
<         if( ( ret = mbedtls_ecdh_setup( ctx, key->grp.id ) ) != 0 )
<             return( ret );
<     }
<     else
<     {
<         /* This is not the first call to get_params(). Check that the
<          * current key's group is the same as the context's, which was set
<          * from the first key's group. */
<         if( mbedtls_ecdh_grp_id( ctx ) != key->grp.id )
<             return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
<     }
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_get_params_internal( ctx, key, side ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_get_params_internal( &ctx->ctx.mbed_ecdh,
<                                               key, side ) );
<         default:
<             return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
<     }
< #endif
< }
< 
< static int ecdh_make_public_internal( mbedtls_ecdh_context_mbed *ctx,
<                                       size_t *olen, int point_format,
<                                       unsigned char *buf, size_t blen,
<                                       int (*f_rng)(void *,
<                                                    unsigned char *,
<                                                    size_t),
<                                       void *p_rng,
<                                       int restart_enabled )
---
> int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
>                       unsigned char *buf, size_t blen,
>                       int (*f_rng)(void *, unsigned char *, size_t),
>                       void *p_rng )
495,497d208
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     mbedtls_ecp_restart_ctx *rs_ctx = NULL;
< #endif
499c210
<     if( ctx->grp.pbits == 0 )
---
>     if( ctx == NULL || ctx->grp.pbits == 0 )
502,515c213,214
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( restart_enabled )
<         rs_ctx = &ctx->rs;
< #else
<     (void) restart_enabled;
< #endif
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
<                                              f_rng, p_rng, rs_ctx ) ) != 0 )
<         return( ret );
< #else
<     if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
<                                          f_rng, p_rng ) ) != 0 )
---
>     if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
>                 != 0 )
517d215
< #endif /* MBEDTLS_ECP_RESTARTABLE */
519,520c217,218
<     return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
<                                         buf, blen );
---
>     return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
>                                 olen, buf, blen );
524c222
<  * Setup and export the client public value
---
>  * Parse and import the client's public value
526,559c224,225
< int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
<                               unsigned char *buf, size_t blen,
<                               int (*f_rng)(void *, unsigned char *, size_t),
<                               void *p_rng )
< {
<     int restart_enabled = 0;
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( olen != NULL );
<     ECDH_VALIDATE_RET( buf != NULL );
<     ECDH_VALIDATE_RET( f_rng != NULL );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     restart_enabled = ctx->restart_enabled;
< #endif
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
<                                        f_rng, p_rng, restart_enabled ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_make_public_internal( &ctx->ctx.mbed_ecdh, olen,
<                                                ctx->point_format, buf, blen,
<                                                f_rng, p_rng,
<                                                restart_enabled ) );
<         default:
<             return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
<     }
< #endif
< }
< 
< static int ecdh_read_public_internal( mbedtls_ecdh_context_mbed *ctx,
<                                       const unsigned char *buf, size_t blen )
---
> int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
>                       const unsigned char *buf, size_t blen )
564,565c230,233
<     if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p,
<                                             blen ) ) != 0 )
---
>     if( ctx == NULL )
>         return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
> 
>     if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p, blen ) ) != 0 )
575c243
<  * Parse and import the client's public value
---
>  * Derive and export the shared secret
577,604c245,248
< int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
<                               const unsigned char *buf, size_t blen )
< {
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( buf != NULL );
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_read_public_internal( ctx, buf, blen ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_read_public_internal( &ctx->ctx.mbed_ecdh,
<                                                        buf, blen ) );
<         default:
<             return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
<     }
< #endif
< }
< 
< static int ecdh_calc_secret_internal( mbedtls_ecdh_context_mbed *ctx,
<                                       size_t *olen, unsigned char *buf,
<                                       size_t blen,
<                                       int (*f_rng)(void *,
<                                                    unsigned char *,
<                                                    size_t),
<                                       void *p_rng,
<                                       int restart_enabled )
---
> int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
>                       unsigned char *buf, size_t blen,
>                       int (*f_rng)(void *, unsigned char *, size_t),
>                       void *p_rng )
607,609d250
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     mbedtls_ecp_restart_ctx *rs_ctx = NULL;
< #endif
611c252
<     if( ctx == NULL || ctx->grp.pbits == 0 )
---
>     if( ctx == NULL )
614,630c255,256
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( restart_enabled )
<         rs_ctx = &ctx->rs;
< #else
<     (void) restart_enabled;
< #endif
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     if( ( ret = ecdh_compute_shared_restartable( &ctx->grp, &ctx->z, &ctx->Qp,
<                                                  &ctx->d, f_rng, p_rng,
<                                                  rs_ctx ) ) != 0 )
<     {
<         return( ret );
<     }
< #else
<     if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
<                                              &ctx->d, f_rng, p_rng ) ) != 0 )
---
>     if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
>                                      f_rng, p_rng ) ) != 0 )
634d259
< #endif /* MBEDTLS_ECP_RESTARTABLE */
643,674d267
< /*
<  * Derive and export the shared secret
<  */
< int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
<                               unsigned char *buf, size_t blen,
<                               int (*f_rng)(void *, unsigned char *, size_t),
<                               void *p_rng )
< {
<     int restart_enabled = 0;
<     ECDH_VALIDATE_RET( ctx != NULL );
<     ECDH_VALIDATE_RET( olen != NULL );
<     ECDH_VALIDATE_RET( buf != NULL );
< 
< #if defined(MBEDTLS_ECP_RESTARTABLE)
<     restart_enabled = ctx->restart_enabled;
< #endif
< 
< #if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
<     return( ecdh_calc_secret_internal( ctx, olen, buf, blen, f_rng, p_rng,
<                                        restart_enabled ) );
< #else
<     switch( ctx->var )
<     {
<         case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
<             return( ecdh_calc_secret_internal( &ctx->ctx.mbed_ecdh, olen, buf,
<                                                blen, f_rng, p_rng,
<                                                restart_enabled ) );
<         default:
<             return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
<     }
< #endif
< }
675a269
> #endif /*#if !defined(MBEDTLS_ECDH_ALT) */
